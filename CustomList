package com.example.helloworld;

public class CustomList {
    private Task first;
    private Task recent;
    public CustomList(){
        first = null;
        recent = null;
    }
    /**
     * Adds a new task to the list.
     *
     * @param Task the task to add
     */

    public void add(Task task){
        if (isEmpty()){
            first = task;
            recent = task;
        }
        else if (task.getPriority() == 1){
            task.partner(first);
            first = task;
        }
        else if (getLast().getPriority() < task.getPriority()) {
            recent.partner(task);
            recent = task;
        } else if (getFirst().getPriority() > task.getPriority()) {
            task.partner(first);
            first = task;
        } else {
            boolean breakloop = false;
            while (!breakloop) {
                for (int i = 1; i < size(); i++) {
                    if (get(i - 1).getPriority() <= task.getPriority() && task.getPriority() <= get(i).getPriority()) {
                        add(i, task);
                        break;
                    }
                }
                breakloop = true;
            }
        }
    }
    /**
     * Adds a new task to the list at a certain position
     *
     * @param index the position to which the task is added
     * @param Task the task to add
     * @throws IllegalArgumentException if the index is not part of the list
     */

    public void add(int index, Task task){
        Task bin = first;
        if(index > size()){
            return;
        }
        while(index != 1){
            bin = bin.getPartner();
            index--;
        }
        task.partner(bin.getPartner());
        bin.partner(task);
    }

    /**
     * Finds and returns a task at a index
     *
     * @param index the position on the list which the task is
     * @return The task searched for
     */

    public Task get(int index){
        Task bin = first;
        while(index != 0){
            bin = bin.getPartner();
            index--;
        }
        return bin;
    }

    /**
     * Finds and removes a task at a index
     *
     * @param index the position on the list which the task is
     */
    public void remove(int index){
        Task bin = first;
        while(index != 1){
            bin = bin.getPartner();
            index--;
        }
        if(bin.getPartner().getPartner() == null) {
            bin.partner(null);
        }
        else {
            bin.partner(bin.getPartner().getPartner());
        }
    }

    /**
     * Returns the task at beginning of the list
     *
     * @return Task at the beginning of the list
     */
    public Task getFirst(){
        return first;
    }
    /**
     * Returns the task at the end of the list
     *
     * @return Task at the end of the list
     */
    public Task getLast(){
        return recent;
    }
    /**
     * Calculates the size of the list
     *
     * @return Size of the list
     */
    public int size() {
        int count;
        if (first == null)
            return 0;
        else {
            Task sizer = first;
            count = 1;
            while (sizer.getPartner() != null) {
                sizer = sizer.getPartner();
                count++;
            }
        }
        return count;
    }
    /**
     * Checks if the list is empty
     *
     * @return True if the list is empty
     */
    public boolean isEmpty(){
        if(size() == 0)
            return true;
        else{
            return false;
        }
    }
    /**
     * The set output if printed
     *
     * @return A string containing all the tasks in the list
     */
    public String toString(){
        String output = "";
        int count;
        if (first == null)
            return "";
        else {
            Task sizer = first;
            count = 1;
            while (sizer.getPartner() != null) {
                output += sizer.toString();
                sizer = sizer.getPartner();
            }
            output += sizer.toString();
        }
        return output;
    }

}
