import json
import torch
from torch.nn.functional import cosine_similarity
from sentence_transformers import SentenceTransformer, util

# Load a pre-trained Sentence Transformer model
model = SentenceTransformer('all-MiniLM-L6-v2')
tokenizer = model.tokenizer
model.eval()

def compare(string1, string2):
    embedding1 = model.encode(string1, convert_to_tensor=True)
    embedding2 = model.encode(string2, convert_to_tensor=True)
    similarity = util.pytorch_cos_sim(embedding1, embedding2)
    print(similarity)
    return similarity

file = open("file.json", "r")
file = json.load(file)
questions = file["questions"]

array = []
output = file["output"]
threshold = output["match_similarity"]
def add(repeating):
    loop = False
    check = False
    while not loop:
        answer = input("")
        check = False
        if answer == "esc":
            break
        for z in i["options"]:
            z = z["tags"]
            if compare(answer.lower(), z[0].lower()).item() > threshold:
                array.extend([z[0]])
                check = True
                if not repeating:
                    loop = True
        if not check:
            print("Please enter a valid answer.")
for i in questions:
    print(i["question"])
    print("Your options:")
    for y in i["options"]:
        print(y["text"])
    if i["type"] == "multiple_choice":
        print("You may select multiple choices by typing in a value and entering")
        print("If you wish to enter no more values enter esc")
        add(True)
    else:
        add(False)
match = 0
threshold = output["match_threshold"]
classes = []
for cls in file["classes"]:
    name = cls["name"]
    tags = cls["criteria"]["tags"]
    match = sum(1 for tag in tags if tag in array)
    if match / len(tags) > threshold:
        classes.append(name)
if len(classes) == 0:
    print("No matches found")
else:
    print("The classes found for you are " + ", ".join(classes))
